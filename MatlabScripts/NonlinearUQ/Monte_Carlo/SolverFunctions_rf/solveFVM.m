% This routine returns the discretization matrix A and right side B with
% the coordiantes X and Y for nodes given. Depending on the position of the
% node (inner, boundary or corner) a different discretization stencil is
% used. For the inner corners a seperate elseif routine is used. 

function [A,B,Axn,Axs]  = solveFVM(X, Y, index, boundary, dim)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% File solveFVM.m
%
% This routine set up the linear system and solve it
%
% input
% T         Spatial Matrix T
% X         Matrix x coordinates
% Y         Matrix y coordinates
% boundary  String vector. Boundary types.
% TD        Temperature for each boundary (if Dirichlet)
% alpha     convective heat transfer coefficient
% Tinf      Temperature of the surrouding fluid
%
% output
% T         Temperature field

% Index maps the node position to the correct linear equation

[dimY,dimX] = size(X);



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% set up the system matrix A

%%
%Create the intermediate new meshes

nodes.nodesH_X = (X(:,1:dimX-1)+X(:,2:dimX))/2;
nodes.nodesH_Y = (Y(:,1:dimX-1)+Y(:,2:dimX))/2;

nodes.nodesV_X = (X(1:dimY-1,:)+X(2:dimY,:))/2;
nodes.nodesV_Y = (Y(1:dimY-1,:)+Y(2:dimY,:))/2;

%nodes.nodesC_X = (X(1:dimY-1,1:dimX-1)+X(2:dimY,1:dimX-1)+X(1:dimY-1,2:dimX)+X(2:dimY,2:dimX))/4;
%nodes.nodesC_Y = (Y(1:dimY-1,1:dimX-1)+Y(2:dimY,1:dimX-1)+Y(1:dimY-1,2:dimX)+Y(2:dimY,2:dimX))/4;
nodes.nodesC_X = (nodes.nodesH_X(1:dimY-1,:)+nodes.nodesH_X(2:dimY,:))/2;
nodes.nodesC_Y = (nodes.nodesH_Y(1:dimY-1,:)+nodes.nodesH_Y(2:dimY,:))/2;


%%
%Compute the distances between the intermediate nodes for the inner nodes
distances.dX_nodesH_H = nodes.nodesH_X(:,2:dimX-1)-nodes.nodesH_X(:,1:dimX-2);  % dimY*dimX-2
distances.dY_nodesH_H = nodes.nodesH_Y(:,2:dimX-1)-nodes.nodesH_Y(:,1:dimX-2);  % dimY*dimX-2
distances.dX_nodesH_V = nodes.nodesH_X(2:dimY,:)-nodes.nodesH_X(1:dimY-1,:);    % dimY-1 *dimX-1
distances.dY_nodesH_V = nodes.nodesH_Y(2:dimY,:)-nodes.nodesH_Y(1:dimY-1,:);    % dimY-1 *dimX-1

distances.dX_nodesV_H = nodes.nodesV_X(:,2:dimX)-nodes.nodesV_X(:,1:dimX-1); % dimy-1 * dimx-1
distances.dY_nodesV_H = nodes.nodesV_Y(:,2:dimX)-nodes.nodesV_Y(:,1:dimX-1); % dimy-1 * dimx-1
distances.dX_nodesV_V = nodes.nodesV_X(2:dimY-1,:)-nodes.nodesV_X(1:dimY-2,:); % dimy-2 *dimx
distances.dY_nodesV_V = nodes.nodesV_Y(2:dimY-1,:)-nodes.nodesV_Y(1:dimY-2,:); % dimy-2 *dimx

distances.dX_nodesC_H = nodes.nodesC_X(:,2:dimX-1)-nodes.nodesC_X(:,1:dimX-2); % dimY-1 * dimx-2
distances.dY_nodesC_H = nodes.nodesC_Y(:,2:dimX-1)-nodes.nodesC_Y(:,1:dimX-2);
distances.dX_nodesC_V = nodes.nodesC_X(2:dimY-1,:)-nodes.nodesC_X(1:dimY-2,:);  % dimY-2 *dimx-1
distances.dY_nodesC_V = nodes.nodesC_Y(2:dimY-1,:)-nodes.nodesC_Y(1:dimY-2,:);


%%
%Compute the distances between the intermediate nodes for the boundary
%conditions

distances_north.dX_nodesV_H = X(1,2:dimX)-X(1,1:dimX-1); %for the north boundary condition
distances_north.dY_nodesV_H = Y(1,2:dimX)-Y(1,1:dimX-1);   % 1 * dimX-1
distances_north.dX_nodesV_V = nodes.nodesV_X(1,:)-X(1,:);  % 1 * dimX
distances_north.dY_nodesV_V = nodes.nodesV_Y(1,:)-Y(1,:); 
distances_north.dX_nodesC_V = nodes.nodesC_X(1,:)-nodes.nodesH_X(1,:); % 1 * dimX-1
distances_north.dY_nodesC_V = nodes.nodesC_Y(1,:)-nodes.nodesH_Y(1,:);

distances_south.dX_nodesV_H = X(dimY,2:dimX)-X(dimY,1:dimX-1); %for the south boundary condition
distances_south.dY_nodesV_H = Y(dimY,2:dimX)-Y(dimY,1:dimX-1);
distances_south.dX_nodesV_V = X(dimY,:)-nodes.nodesV_X(dimY-1,:);
distances_south.dY_nodesV_V = Y(dimY,:)-nodes.nodesV_Y(dimY-1,:);
distances_south.dX_nodesC_V = nodes.nodesH_X(dimY,:)-nodes.nodesC_X(dimY-1,:);
distances_south.dY_nodesC_V = nodes.nodesH_Y(dimY,:)-nodes.nodesC_Y(dimY-1,:);

distances_west.dX_nodesH_V = X(2:dimY,1)-X(1:dimY-1,1); % dimy-1 *1      for the west boundary condition   
distances_west.dY_nodesH_V = Y(2:dimY,1)-Y(1:dimY-1,1); % dimy-1 *1            
distances_west.dX_nodesH_H = nodes.nodesH_X(:,1)-X(:,1); %dimy   *1
distances_west.dY_nodesH_H = nodes.nodesH_Y(:,1)-Y(:,1); %dimy   *1
distances_west.dX_nodesC_H = nodes.nodesC_X(:,1)-nodes.nodesV_X(:,1); % dimY-1 *1
distances_west.dY_nodesC_H = nodes.nodesC_Y(:,1)-nodes.nodesV_Y(:,1); % dimy-1 *1

distances_east.dX_nodesH_V = X(2:dimY,dimX)-X(1:dimY-1,dimX); % dimy-1 * 1
distances_east.dY_nodesH_V = Y(2:dimY,dimX)-Y(1:dimY-1,dimX); % dimy-1 * 1
distances_east.dX_nodesH_H = X(:,dimX)-nodes.nodesH_X(:,dimX-1); % dimY *1
distances_east.dY_nodesH_H = Y(:,dimX)-nodes.nodesH_Y(:,dimX-1); % dimY *1
distances_east.dX_nodesC_H = nodes.nodesV_X(:,dimX)-nodes.nodesC_X(:,dimX-1); %dimY-1 *1
distances_east.dY_nodesC_H = nodes.nodesV_Y(:,dimX)-nodes.nodesC_Y(:,dimX-1); % dimY-1 *1



%%
%Compute the areas
areas.S_C = pi*(abs(((nodes.nodesC_X(1:end-1,2:end).*nodes.nodesC_Y(1:end-1,1:end-1)) +...
                     (nodes.nodesC_X(2:end,1:end-1).*nodes.nodesC_Y(1:end-1,2:end)) +...
                     (nodes.nodesC_X(1:end-1,1:end-1).*nodes.nodesC_Y(2:end,1:end-1)) -...
                     (nodes.nodesC_X(1:end-1,2:end).*nodes.nodesC_Y(2:end,1:end-1)) -...
                     (nodes.nodesC_X(1:end-1,1:end-1).*nodes.nodesC_Y(1:end-1,2:end)) -...
                     (nodes.nodesC_X(2:end,1:end-1).*nodes.nodesC_Y(1:end-1,1:end-1))) .*...
                     (nodes.nodesC_X(2:end,1:end-1)/3 + 2/6*(nodes.nodesC_X(1:end-1,2:end)+nodes.nodesC_X(1:end-1,1:end-1)))) +...       
                abs(((nodes.nodesC_X(2:end,2:end).*nodes.nodesC_Y(1:end-1,2:end)) +...
                     (nodes.nodesC_X(2:end,1:end-1).*nodes.nodesC_Y(2:end,2:end)) +...
                     (nodes.nodesC_X(1:end-1,2:end).*nodes.nodesC_Y(2:end,1:end-1)) -...
                     (nodes.nodesC_X(2:end,2:end).*nodes.nodesC_Y(2:end,1:end-1)) -...
                     (nodes.nodesC_X(1:end-1,2:end).*nodes.nodesC_Y(2:end,2:end)) -...
                     (nodes.nodesC_X(2:end,1:end-1).*nodes.nodesC_Y(1:end-1,2:end))) .*...
                     (nodes.nodesC_X(2:end,1:end-1)/3 + 2/6*(nodes.nodesC_X(2:end,2:end)+nodes.nodesC_X(1:end-1,2:end)))) );

% areas.S_C = 1/2*abs(... %for the inner nodes
%     (nodes.nodesC_X(1:dimY-2,1:dimX-2)-nodes.nodesC_X(2:dimY-1,2:dimX-1)) .*...
%     (nodes.nodesC_Y(1:dimY-2,2:dimX-1)-nodes.nodesC_Y(2:dimY-1,1:dimX-2)) -...
%     (nodes.nodesC_X(1:dimY-2,2:dimX-1)-nodes.nodesC_X(2:dimY-1,1:dimX-2)) .*...
%     (nodes.nodesC_Y(1:dimY-2,1:dimX-2)-nodes.nodesC_Y(2:dimY-1,2:dimX-1)));

areas.S_V = 1/2*abs(... %for the inner nodes
    (nodes.nodesH_X(1:dimY-1,1:dimX-2)-nodes.nodesH_X(2:dimY,2:dimX-1)) .*...
    (nodes.nodesH_Y(1:dimY-1,2:dimX-1)-nodes.nodesH_Y(2:dimY,1:dimX-2)) -...
    (nodes.nodesH_X(1:dimY-1,2:dimX-1)-nodes.nodesH_X(2:dimY,1:dimX-2)) .*...
    (nodes.nodesH_Y(1:dimY-1,1:dimX-2)-nodes.nodesH_Y(2:dimY,2:dimX-1)));

areas.S_H = 1/2*abs(... %for the inner nodes
    (nodes.nodesV_X(1:dimY-2,1:dimX-1)-nodes.nodesV_X(2:dimY-1,2:dimX)) .*...
    (nodes.nodesV_Y(1:dimY-2,2:dimX)-nodes.nodesV_Y(2:dimY-1,1:dimX-1)) -...
    (nodes.nodesV_X(1:dimY-2,2:dimX)-nodes.nodesV_X(2:dimY-1,1:dimX-1)) .*...
    (nodes.nodesV_Y(1:dimY-2,1:dimX-1)-nodes.nodesV_Y(2:dimY-1,2:dimX)));

areas.S_N = 1/2*abs(... %for the norther nodes
    (X(1,1:dimX-1)-nodes.nodesV_X(1,2:dimX)) .*...
    (Y(1,2:dimX)-nodes.nodesV_Y(1,1:dimX-1)) -...
    (X(1,2:dimX)-nodes.nodesV_X(1,1:dimX-1)) .*...
    (Y(1,1:dimX-1)-nodes.nodesV_Y(1,2:dimX)));

areas.S_S = 1/2*abs(... %for the souther nodes
    (nodes.nodesV_X(dimY-1,1:dimX-1)-X(dimY,2:dimX)) .*...
    (nodes.nodesV_Y(dimY-1,2:dimX)-Y(dimY,1:dimX-1)) - ...
    (nodes.nodesV_X(dimY-1,2:dimX)-X(dimY,1:dimX-1)) .*...
    (nodes.nodesV_Y(dimY-1,1:dimX-1)-Y(dimY,2:dimX)));

areas.S_W = 1/2*abs(... %for the wester nodes
    (X(1:dimY-1,1)-nodes.nodesH_X(2:dimY,1)) .*...
    (nodes.nodesH_Y(1:dimY-1,1)-Y(2:dimY,1)) -...
    (nodes.nodesH_X(1:dimY-1,1)-X(2:dimY,1)) .*...
    (Y(1:dimY-1,1)-nodes.nodesH_Y(2:dimY,1)));

areas.S_E = 1/2*abs(... %for the easter nodes
    (X(1:dimY-1,dimX)-nodes.nodesH_X(2:dimY,dimX-1)) .*...
    (nodes.nodesH_Y(1:dimY-1,dimX-1)-Y(2:dimY,dimX)) -...
    (nodes.nodesH_X(1:dimY-1,dimX-1)-X(2:dimY,dimX)) .*...
    (Y(1:dimY-1,dimX)-nodes.nodesH_Y(2:dimY,dimX-1)));

areas.S_P_north = pi*(abs(((nodes.nodesH_X(1,2:end).*nodes.nodesH_Y(1,1:end-1)) +... %areas around the point P for the north nodes
                     (nodes.nodesC_X(1,1:end-1).*nodes.nodesH_Y(1,2:end)) +...
                     (nodes.nodesH_X(1,1:end-1).*nodes.nodesC_Y(1,1:end-1)) -...
                     (nodes.nodesH_X(1,2:end).*nodes.nodesC_Y(1,1:end-1)) -...
                     (nodes.nodesH_X(1,1:end-1).*nodes.nodesH_Y(1,2:end)) -...
                     (nodes.nodesC_X(1,1:end-1).*nodes.nodesH_Y(1,1:end-1))) .*...
                     (nodes.nodesC_X(1,1:end-1)/3 + 2/6*(nodes.nodesH_X(1,2:end)+nodes.nodesH_X(1,1:end-1)))) +...       
                abs(((nodes.nodesC_X(1,2:end).*nodes.nodesH_Y(1,2:end)) +...
                     (nodes.nodesC_X(1,1:end-1).*nodes.nodesC_Y(1,2:end)) +...
                     (nodes.nodesH_X(1,2:end).*nodes.nodesC_Y(1,1:end-1)) -...
                     (nodes.nodesC_X(1,2:end).*nodes.nodesC_Y(1,1:end-1)) -...
                     (nodes.nodesH_X(1,2:end).*nodes.nodesC_Y(1,2:end)) -...
                     (nodes.nodesC_X(1,1:end-1).*nodes.nodesH_Y(1,2:end))) .*...
                     (nodes.nodesC_X(1,1:end-1)/3 + 2/6*(nodes.nodesC_X(1,2:end)+nodes.nodesH_X(1,2:end)))) );


% areas.S_P_north = 1/2*abs(... %areas around the point P for the north nodes
%     (nodes.nodesH_X(1,1:dimX-2)-nodes.nodesC_X(1,2:dimX-1)) .*...
%     (nodes.nodesH_Y(1,2:dimX-1)-nodes.nodesC_Y(1,1:dimX-2)) -...
%     (nodes.nodesH_X(1,2:dimX-1)-nodes.nodesC_X(1,1:dimX-2)) .*...
%     (nodes.nodesH_Y(1,1:dimX-2)-nodes.nodesC_Y(1,2:dimX-1)));

areas.S_P_south = pi*(abs(((nodes.nodesC_X(end,2:end).*nodes.nodesC_Y(end,1:end-1)) +... %areas around the point P for the south nodes
                           (nodes.nodesH_X(end,1:end-1).*nodes.nodesC_Y(end,2:end)) +...
                           (nodes.nodesC_X(end,1:end-1).*nodes.nodesH_Y(end,1:end-1)) -...
                           (nodes.nodesC_X(end,2:end).*nodes.nodesH_Y(end,1:end-1)) -...
                           (nodes.nodesC_X(end,1:end-1).*nodes.nodesC_Y(end,2:end)) -...
                           (nodes.nodesH_X(end,1:end-1).*nodes.nodesC_Y(end,1:end-1))) .*...
                           (nodes.nodesH_X(end,1:end-1)/3 + 2/6*(nodes.nodesC_X(end,2:end)+nodes.nodesC_X(end,1:end-1)))) +...       
                      abs(((nodes.nodesH_X(end,2:end).*nodes.nodesC_Y(end,2:end)) +...
                           (nodes.nodesH_X(end,1:end-1).*nodes.nodesH_Y(end,2:end)) +...
                           (nodes.nodesC_X(end,2:end).*nodes.nodesH_Y(end,1:end-1)) -...
                           (nodes.nodesH_X(end,2:end).*nodes.nodesH_Y(end,1:end-1)) -...
                           (nodes.nodesC_X(end,2:end).*nodes.nodesH_Y(end,2:end)) -...
                           (nodes.nodesH_X(end,1:end-1).*nodes.nodesC_Y(end,2:end))) .*...
                           (nodes.nodesH_X(end,1:end-1)/3 + 2/6*(nodes.nodesH_X(end,2:end)+nodes.nodesC_X(end,2:end)))) );

% areas.S_P_south = 1/2*abs(... %areas around the point P for the south nodes.nodes
%     (nodes.nodesC_X(end,1:dimX-2)-nodes.nodesH_X(end,2:dimX-1)) .*...
%     (nodes.nodesC_Y(end,2:dimX-1)-nodes.nodesH_Y(end,1:dimX-2)) -...
%     (nodes.nodesC_X(end,2:dimX-1)-nodes.nodesH_X(end,1:dimX-2)) .*...
%     (nodes.nodesC_Y(end,1:dimX-2)-nodes.nodesH_Y(end,2:dimX-1)));

areas.S_P_west = pi*(abs(((nodes.nodesC_X(1:end-1,1).*nodes.nodesV_Y(1:end-1,1)) +... %areas around the point P for the west nodes.nodes
                          (nodes.nodesV_X(2:end,1).*nodes.nodesC_Y(1:end-1,1)) +...
                          (nodes.nodesV_X(1:end-1,1).*nodes.nodesV_Y(2:end,1)) -...
                          (nodes.nodesC_X(1:end-1,1).*nodes.nodesV_Y(2:end,1)) -...
                          (nodes.nodesV_X(1:end-1,1).*nodes.nodesC_Y(1:end-1,1)) -...
                          (nodes.nodesV_X(2:end,1).*nodes.nodesV_Y(1:end-1,1))) .*...
                          (nodes.nodesV_X(2:end,1)/3 + 2/6*(nodes.nodesC_X(1:end-1,1)+nodes.nodesV_X(1:end-1,1)))) +...       
                     abs(((nodes.nodesC_X(2:end,1).*nodes.nodesC_Y(1:end-1,1)) +...
                          (nodes.nodesV_X(2:end,1).*nodes.nodesC_Y(2:end,1)) +...
                          (nodes.nodesC_X(1:end-1,1).*nodes.nodesV_Y(2:end,1)) -...
                          (nodes.nodesC_X(2:end,1).*nodes.nodesV_Y(2:end,1)) -...
                          (nodes.nodesC_X(1:end-1,1).*nodes.nodesC_Y(2:end,1)) -...
                          (nodes.nodesV_X(2:end,1).*nodes.nodesC_Y(1:end-1,1))) .*...
                          (nodes.nodesV_X(2:end,1)/3 + 2/6*(nodes.nodesC_X(2:end,1)+nodes.nodesC_X(1:end-1,1)))) );

% areas.S_P_west = 1/2*abs(... %areas around the point P for the west nodes.nodes
%     (nodes.nodesV_X(1:dimY-2,1)-nodes.nodesC_X(2:dimY-1,1)) .*...
%     (nodes.nodesC_Y(1:dimY-2,1)-nodes.nodesV_Y(2:dimY-1,1)) -...
%     (nodes.nodesC_X(1:dimY-2,1)-nodes.nodesV_X(2:dimY-1,1)) .*...
%     (nodes.nodesV_Y(1:dimY-2,1)-nodes.nodesC_Y(2:dimY-1,1)));

areas.S_P_east = pi*(abs((nodes.nodesV_X(1:end-1,end).*nodes.nodesC_Y(1:end-1,end)) +... %areas around the point P for the east nodes.nodes
                          (nodes.nodesC_X(2:end,end).*nodes.nodesV_Y(1:end-1,end)) +...
                          (nodes.nodesC_X(1:end-1,end).*nodes.nodesC_Y(2:end,end)) -...
                          (nodes.nodesV_X(1:end-1,end).*nodes.nodesC_Y(2:end,end)) -...
                          (nodes.nodesC_X(1:end-1,end).*nodes.nodesV_Y(1:end-1,end)) -...
                          (nodes.nodesC_X(2:end,end).*nodes.nodesC_Y(1:end-1,end))) .*...
                          (nodes.nodesC_X(2:end,end)/3 + 2/6*(nodes.nodesV_X(1:end-1,end)+nodes.nodesC_X(1:end-1,end))) +...       
                     abs((nodes.nodesV_X(2:end,end).*nodes.nodesV_Y(1:end-1,end)) +...
                          (nodes.nodesC_X(2:end,end).*nodes.nodesV_Y(2:end,end)) +...
                          (nodes.nodesV_X(1:end-1,end).*nodes.nodesC_Y(2:end,end)) -...
                          (nodes.nodesV_X(2:end,end).*nodes.nodesC_Y(2:end,end)) -...
                          (nodes.nodesV_X(1:end-1,end).*nodes.nodesV_Y(2:end,end)) -...
                          (nodes.nodesC_X(2:end,end).*nodes.nodesV_Y(1:end-1,end))) .*...
                          (nodes.nodesC_X(2:end,end)/3 + 2/6*(nodes.nodesV_X(2:end,end)+nodes.nodesV_X(1:end-1,end))) );
                    

% areas.S_P_east = 1/2*abs(... %areas around the point P for the east nodes.nodes
%     (nodes.nodesC_X(1:dimY-2,end)-nodes.nodesV_X(2:dimY-1,end)) .*...
%     (nodes.nodesV_Y(1:dimY-2,end)-nodes.nodesC_Y(2:dimY-1,end)) -...
%     (nodes.nodesV_X(1:dimY-2,end)-nodes.nodesC_X(2:dimY-1,end)) .*...
%     (nodes.nodesC_Y(1:dimY-2,end)-nodes.nodesV_Y(2:dimY-1,end)));

areas.S_P_nw = pi* (abs(det([ones(3,1),[nodes.nodesV_X(1,1);nodes.nodesH_X(1,1);X(1,1)],[nodes.nodesV_Y(1,1);nodes.nodesH_Y(1,1);Y(1,1)]]))*...
                    ( nodes.nodesV_X(1,1)/3 + 2/6*(nodes.nodesH_X(1,1)+X(1,1)) )+...
                    abs(det([ones(3,1),[nodes.nodesV_X(1,1);nodes.nodesC_X(1,1);nodes.nodesH_X(1,1)],[nodes.nodesV_Y(1,1);nodes.nodesC_Y(1,1);nodes.nodesH_Y(1,1)]]))*...
                    ( nodes.nodesV_X(1,1)/3 + 2/6*(nodes.nodesC_X(1,1)+nodes.nodesH_X(1,1)) ) ) ;
                
% areas.S_P_nw = 1/2*abs(...
%     (X(1,1)-nodes.nodesC_X(1,1)) * ...
%     (nodes.nodesV_Y(1,1)-nodes.nodesH_Y(1,1)) - ...
%     (nodes.nodesV_X(1,1)-nodes.nodesH_X(1,1)) * ...
%     (Y(1,1)-nodes.nodesC_Y(1,1)));

areas.S_P_sw = pi* (abs(det([ones(3,1),[X(end,1);nodes.nodesC_X(end,1);nodes.nodesV_X(end,1)],[Y(end,1);nodes.nodesC_Y(end,1);nodes.nodesV_Y(end,1)]]))*...
                    ( nodes.nodesV_X(1,1)/3 + 2/6*(nodes.nodesH_X(1,1)+X(1,1)) )+...
                    abs(det([ones(3,1),[X(end,1);nodes.nodesH_X(end,1);nodes.nodesC_X(end,1)],[Y(end,1);nodes.nodesH_Y(end,1);nodes.nodesC_Y(end,1)]]))*...
                    ( nodes.nodesV_X(1,1)/3 + 2/6*(nodes.nodesC_X(1,1)+nodes.nodesH_X(1,1)) ) ); 

% areas.S_P_sw = 1/2*abs(...
%     (nodes.nodesV_X(end,1)-nodes.nodesH_X(end,1)) * ...
%     (Y(end,1)-nodes.nodesC_Y(end,1)) - ...
%     (X(end,1)-nodes.nodesC_X(end,1)) * ...
%     (nodes.nodesV_Y(end,1)-nodes.nodesH_Y(end,1)));

areas.S_P_ne = pi* (abs(det([ones(3,1),[nodes.nodesC_X(1,end);X(1,end);nodes.nodesH_X(1,end)],[nodes.nodesC_Y(1,end);Y(1,end);nodes.nodesH_Y(1,end)]]))*...
                    ( nodes.nodesC_X(1,end)/3 + 2/6*(X(1,end)+nodes.nodesH_X(1,end)) )+...
                    abs(det([ones(3,1),[nodes.nodesC_X(1,end);nodes.nodesV_X(1,end);X(1,end)],[nodes.nodesC_Y(1,end);nodes.nodesV_Y(1,end);Y(1,end)]]))*...
                    ( nodes.nodesC_X(1,end)/3 + 2/6*(nodes.nodesV_X(1,end)+X(1,end)) ) ); 

% areas.S_P_ne = 1/2*abs(...
%     (nodes.nodesH_X(1,end)-nodes.nodesV_X(1,end)) * ...
%     (nodes.nodesC_Y(1,end)-Y(1,end)) - ...
%     (nodes.nodesC_X(1,end)-X(1,end)) * ...
%     (nodes.nodesH_Y(1,end)-nodes.nodesV_Y(1,end)));

areas.S_P_se = pi* (abs(det([ones(3,1),[nodes.nodesH_X(end,end);nodes.nodesV_X(end,end);nodes.nodesC_X(end,end)],[nodes.nodesH_Y(end,end);nodes.nodesV_Y(end,end);nodes.nodesC_Y(end,end)]]))*...
                    ( nodes.nodesH_X(end,end)/3 + 2/6*(nodes.nodesV_X(end,end)+nodes.nodesC_X(end,end)) )+...
                    abs(det([ones(3,1),[nodes.nodesH_X(end,end);X(end,end);nodes.nodesH_X(end,end)],[nodes.nodesH_Y(end,end);Y(end,end);nodes.nodesH_Y(end,end)]]))*...
                    ( nodes.nodesH_X(end,end)/3 + 2/6*(X(end,end)+nodes.nodesH_X(end,end)) ) ); 

% areas.S_P_se = 1/2*abs(...
%     (nodes.nodesC_X(end,end)-X(end,end)) * ...
%     (nodes.nodesH_Y(end,end)-nodes.nodesV_Y(end,end)) - ...
%     (nodes.nodesH_X(end,end)-nodes.nodesV_X(end,end)) * ...
%     (nodes.nodesC_Y(end,end)-Y(end,end)));

if boundary.isInner == 2
    
    areas.S_P_Ine = pi* (abs(det([ones(3,1),[nodes.nodesC_X(2,1);X(2,2);nodes.nodesH_X(2,1)],[nodes.nodesC_Y(2,1);Y(2,2);nodes.nodesH_Y(2,1)]]))* ...
                         (nodes.nodesC_X(2,1)/3 + 2/6*(X(2,2)+nodes.nodesH_X(2,1)) )+...
                          abs(det([ones(3,1),[nodes.nodesC_X(2,1);nodes.nodesV_X(2,2);X(2,2)],[nodes.nodesC_Y(2,1);nodes.nodesV_Y(2,2);Y(2,2)]]))* ...
                         (nodes.nodesC_X(2,1)/3 +2/6*(nodes.nodesV_X(2,2)+X(2,2)) ) )+...
                         ...
                    pi* (abs(det([ones(3,1),[nodes.nodesH_X(2,1);nodes.nodesC_X(1,2);nodes.nodesC_X(1,1)],[nodes.nodesH_Y(2,1);nodes.nodesC_Y(1,2);nodes.nodesC_Y(1,1)]]))* ...
                         (nodes.nodesH_X(2,1)/3 + 2/6*(nodes.nodesC_X(1,2)+nodes.nodesC_X(1,1)) )+...
                          abs(det([ones(3,1),[nodes.nodesH_X(2,1);nodes.nodesH_X(2,2);nodes.nodesC_X(1,2)],[nodes.nodesH_Y(2,1);nodes.nodesH_Y(2,2);nodes.nodesC_Y(1,2)]]))* ...
                         (nodes.nodesH_X(2,1)/3 +2/6*(nodes.nodesH_X(2,2)+nodes.nodesC_X(1,2)) ) );
                     
    areas.S_Ine_left = 1/2*abs(...
                              (nodes.nodesH_X(2,1)-X(3,2)) * ...
                              (nodes.nodesH_Y(3,1)-Y(2,2)) - ...
                              (nodes.nodesH_X(3,1)-X(2,2)) * ...
                              (nodes.nodesH_Y(2,1)-Y(3,2)));

    areas.S_Ine_right = 1/2*abs(...
                               (nodes.nodesV_X(1,2)-X(2,3)) * ...
                               (Y(2,2)-nodes.nodesV_Y(1,3)) - ...
                               (X(2,2)-nodes.nodesV_X(1,3)) * ...
                               (nodes.nodesV_Y(1,2)-Y(2,3))); 
end
                                          
if boundary.isInner == 3
    
                         %smaller part
    areas.S_P_Ise = pi* (abs(det([ones(3,1),[nodes.nodesH_X(2,1);nodes.nodesV_X(1,2);nodes.nodesC_X(1,1)],[nodes.nodesH_Y(2,1);nodes.nodesV_Y(1,2);nodes.nodesC_Y(1,1)]]))* ...
                         (nodes.nodesH_X(2,1)/3 + 2/6*(nodes.nodesV_X(1,2)+nodes.nodesC_X(1,1)) )+...
                          abs(det([ones(3,1),[nodes.nodesH_X(2,1);X(2,2);nodes.nodesV_X(1,2)],[nodes.nodesH_Y(2,1);Y(2,2);nodes.nodesV_Y(1,2)]]))* ...
                         (nodes.nodesH_X(2,1)/3 +2/6*(X(2,2)+nodes.nodesV_X(1,2)) ) )+...
                         ... %bigger part
                    pi* (abs(det([ones(3,1),[nodes.nodesC_X(2,1);nodes.nodesH_X(2,2);nodes.nodesH_X(2,1)],[nodes.nodesC_Y(2,1);nodes.nodesH_Y(2,2);nodes.nodesH_Y(2,1)]]))* ...
                         (nodes.nodesC_X(2,1)/3 + 2/6*(nodes.nodesH_X(2,2)+nodes.nodesH_X(2,1)) )+...
                          abs(det([ones(3,1),[nodes.nodesC_X(2,1);nodes.nodesC_X(2,2);nodes.nodesH_X(2,2)],[nodes.nodesC_Y(2,1);nodes.nodesC_Y(2,2);nodes.nodesH_Y(2,2)]]))* ...
                         (nodes.nodesC_X(2,1)/3 +2/6*(nodes.nodesC_X(2,2)+nodes.nodesH_X(2,2)) ) );
                     
    areas.S_Ise_left = 1/2*abs(...
                              (nodes.nodesH_X(1,1)-X(2,2)) * ...
                              (nodes.nodesH_Y(2,1)-Y(1,2)) - ...
                              (nodes.nodesH_X(2,1)-X(1,2)) * ...
                              (nodes.nodesH_Y(1,1)-Y(2,2)));

    areas.S_Ise_right = 1/2*abs(...
                               (X(2,2)-nodes.nodesV_X(2,3)) * ...
                               (nodes.nodesV_Y(2,2)-Y(2,3)) - ...
                               (nodes.nodesV_X(2,2)-X(2,3)) * ...
                               (Y(2,2)-nodes.nodesV_Y(2,3)));  
end
                      
                      
%%
% figure(3)
% plot(nodes.nodesV_X,nodes.nodesV_Y,'kx',X,Y,'ko',nodes.nodesH_X,nodes.nodesH_Y,'k+',nodes.nodesC_X,nodes.nodesC_Y,'k*')


if boundary.isInner == 0 

    % inner
    [indi,indj,D] = stampInner(nodes.nodesC_X, dimY, dimX, distances, areas, index, boundary, dim);
    % boundaries
    [indiN,indjN,DN,bn,DNX,indxN] = stampN(nodes, dimY, dimX, distances, distances_north, areas, index, boundary, dim);
    bindN=index(1,2:dimX-1);
    [indiS,indjS,DS,bs,DSX,indxS] = stampS(nodes, dimY, dimX, distances, distances_south, areas, index, boundary, dim);
    bindS=index(dimY,2:dimX-1);
    [indiW,indjW,DW,bw] = stampW(nodes, dimY, dimX, distances, distances_west, areas, index, boundary, dim);
    bindW=index(2:dimY-1,1);
    [indiE,indjE,DE,be] = stampE(nodes, dimY, dimX, distances, distances_east, areas, index, boundary, dim);
    bindE=index(2:dimY-1,dimX);
    % Corners
    [indiCnw,indjCnw,DCnw,bnw,DCnwX,indxCnw] = stampCnw(nodes, dimY, dimX, distances, distances_north, distances_west, areas, index, boundary, dim);
    bindNW=index(1,1);
    [indiCsw,indjCsw,DCsw,bsw,DCswX,indxCsw] = stampCsw(nodes, dimY, dimX, distances, distances_south, distances_west, areas, index, boundary, dim);
    bindSW=index(dimY,1);
    [indiCne,indjCne,DCne,bne,DCneX,indxCne] = stampCne(nodes, dimY, dimX, distances, distances_north, distances_east, areas, index, boundary, dim);
    bindNE=index(1,dimX);
    [indiCse,indjCse,DCse,bse,DCseX,indxCse] = stampCse(nodes, dimY, dimX, distances, distances_south, distances_east, areas, index, boundary, dim);
    bindSE=index(dimY,dimX);

    A = sparse(...
         [indi ; indiN ; indiS ; indiW ; indiE; indiCnw ; indiCsw ; indiCne ; indiCse ],...
         [indj ; indjN ; indjS ; indjW ; indjE; indjCnw ; indjCsw ; indjCne ; indjCse ],...
         [D    ; DN    ; DS    ; DW    ; DE   ; DCnw    ; DCsw    ; DCne    ; DCse    ],...
          dim.total,...
          dim.total);

    B = sparse( ...
        [bindN' ; bindS' ; bindW ; bindE ; bindNW; bindSW ; bindNE ; bindSE], ...
         ones(2*(dimY+dimX-2),1), ...
        [bn     ; bs     ; bw    ; be    ; bnw   ; bsw    ; bne    ; bse   ], ...
         dim.total, ...
         1);
    Axn = sparse( ...
        [indxN; indxCnw; indxCne;], ...
        [indxN; indxCnw; indxCne;], ...
        [DNX, DCnwX, DCneX], ... 
         dim.total, ...
         dim.total);
     
    Axs = sparse( ...
        [indxS; indxCsw; indxCse;], ...
        [indxS; indxCsw; indxCse;], ...
        [DSX, DCswX, DCseX], ... 
         dim.total, ...
         dim.total);
     
     
    
elseif boundary.isInner == 1
    
    % inner
    [indi,indj,D] = stampInner(nodes.nodesC_X, dimY, dimX, distances, areas, index, boundary, dim);
    % western 
    [indiW,indjW,DW,bw] = stampW(nodes, dimY, dimX, distances, distances_west, areas, index, boundary, dim);
    bindW = index(2:dimY-1,1);
    
    A = sparse(...
         [indi ; indiW],...
         [indj ; indjW],...
         [D    ; DW   ],...
          dim.total,...
          dim.total);
      
    %B = sparse(bindW, 1, bw, dim.total, 1);
    
elseif boundary.isInner == 2
    
    % Upper 
    [indiIne,indjIne,DIne] = stampIne(nodes, X, Y, distances, areas, index, boundary, dim);

    A = sparse(indiIne, indjIne, DIne, dim.total, dim.total);
    
elseif boundary.isInner == 3
    
    % Lower 
    [indiIse,indjIse,DIse] = stampIse(nodes, X, Y, distances, areas, index, boundary, dim);
    
    A = sparse(indiIse, indjIse, DIse, dim.total, dim.total);

end
